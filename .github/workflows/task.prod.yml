name: Action Prod CI/CD

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod

env:
  DOCKER_USERNAME: ${{ secrets.DKA_DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DKA_DOCKER_TOKEN }}
  DOCKER_REPO: ${{ secrets.DKA_DOCKER_REPO }}
  DOCKER_TAG: ${{ secrets.DKA_DOCKER_TAG }}

  SSH_SERVER_HOST: ${{ secrets.DKA_SSH_SERVER_HOST }}
  SSH_SERVER_USERNAME: ${{ secrets.DKA_SSH_SERVER_USERNAME }}
  SSH_SERVER_PRIVATE_KEY: ${{ secrets.DKA_SSH_SERVER_PRIVATE_KEY }}
  SSH_SERVER_PORT: ${{ secrets.DKA_SSH_SERVER_PORT }}
  SSH_SERVER_PATH: ${{ secrets.DKA_SSH_SERVER_PATH }}

  SERVER_COMPOSE_FILE: compose.stage.yml

jobs:
  build-native:
    name: Publish Image With Single App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}

  build-with-db:
    name: Publish Image With DB Include One DB
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./postgres.Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}-postgres-15
          #tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}-mongo-8.0.5

  pull:
    name: Pull Latest From Hub Docker to Server
    needs: [
      build-native,
      build-with-db
    ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code dari Git Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Copy Template Compose file ke path Server di dalam server path
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_SERVER_HOST }}
          username: ${{ env.SSH_SERVER_USERNAME }}
          key: ${{ env.SSH_SERVER_PRIVATE_KEY }}
          port: ${{ env.SSH_SERVER_PORT }}
          source: ${{ env.SERVER_COMPOSE_FILE }}
          overwrite: true
          target: "./${{ env.SSH_SERVER_PATH }}"

      - name: Menuju Path Di Server, Memuat tar.gz ke system image docker, dan Jalankan Ulang dengan image baru
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_SERVER_HOST }}
          username: ${{ env.SSH_SERVER_USERNAME }}
          key: ${{ env.SSH_SERVER_PRIVATE_KEY }}
          port: ${{ env.SSH_SERVER_PORT }}
          script: |
            # Overide Server Path Yang dituju di dalam server production valid path
            cd "./${{ env.SSH_SERVER_PATH }}"
            # Start new containers
            docker compose -f ${{ env.SERVER_COMPOSE_FILE }} up -d --force-recreate

  clean:
    name: Clean All Image Dangling In Server
    runs-on: ubuntu-latest
    needs: pull
    steps:
      - name: Clean Dangling Image in Dev Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_SERVER_HOST }}
          username: ${{ env.SSH_SERVER_USERNAME }}
          key: ${{ env.SSH_SERVER_PRIVATE_KEY }}
          port: ${{ env.SSH_SERVER_PORT }}
          script: |
            docker image prune -f